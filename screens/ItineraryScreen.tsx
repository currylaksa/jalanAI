// screens/ItineraryScreen.tsx
// Shows a day-by-day itinerary generated by Gemini.
// Users can edit, reorder, or delete items before finalizing.
// Pulls and pushes trip data from Firebase Firestore.

import React, { useState, useEffect } from 'react';
import { View, Text, Button, StyleSheet, ScrollView, FlatList } from 'react-native';
// import { getTripFromFirestore, saveTripToFirestore } from '../utils/firebase'; // Import Firebase helpers

const ItineraryScreen = ({ route, navigation }: any) => {
  // const { itinerary: initialItinerary, tripId } = route.params; // Get initial data or trip ID
  const [itinerary, setItinerary] = useState<any>(null); // State to hold itinerary data

  useEffect(() => {
    // --- TODO: Fetch itinerary from Firestore if tripId exists, otherwise use initialItinerary ---
    // if (tripId) {
    //   getTripFromFirestore(tripId).then(setItinerary).catch(console.error);
    // } else {
    //   setItinerary(initialItinerary);
    // }
    // --- Placeholder Data --- 
    setItinerary({
      title: "Placeholder Trip to KL",
      days: [
        { day: 1, activities: ["Visit Petronas Towers", "Explore KLCC Park"] },
        { day: 2, activities: ["Batu Caves Tour", "Shopping at Bukit Bintang"] },
      ]
    });
    // --- End Placeholder ---
  }, [/* tripId, initialItinerary */]);

  const handleSaveChanges = () => {
    // --- TODO: Save updated itinerary to Firestore ---
    // if (tripId) {
    //   saveTripToFirestore(tripId, itinerary).then(() => alert('Trip Saved!')).catch(console.error);
    // } else {
    //   // Handle saving a new trip if needed
    //   alert('Save functionality not implemented for new trips yet.');
    // }
    alert('Placeholder: Save Changes Clicked!');
  };

  const handleGoToBooking = () => {
    // Navigate to Booking screen, potentially passing trip details
    navigation.navigate('Booking', { itinerary });
  };

  if (!itinerary) {
    return <View style={styles.container}><Text>Loading Itinerary...</Text></View>;
  }

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>{itinerary.title || 'Your Trip Itinerary'}</Text>

      <FlatList
        data={itinerary.days}
        keyExtractor={(item, index) => `day-${index}`}
        renderItem={({ item }) => (
          <View style={styles.dayContainer}>
            <Text style={styles.dayTitle}>Day {item.day}</Text>
            {item.activities.map((activity: string, actIndex: number) => (
              <Text key={actIndex} style={styles.activityText}>- {activity}</Text>
              // Add edit/delete buttons here if needed
            ))}
          </View>
        )}
        scrollEnabled={false} // Disable FlatList scrolling within ScrollView
      />

      <Button title="Save Changes" onPress={handleSaveChanges} />
      <View style={{ marginTop: 10 }} />
      <Button title="Proceed to Booking" onPress={handleGoToBooking} />
    </ScrollView>
  );
};

export default ItineraryScreen;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 15,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  dayContainer: {
    marginBottom: 15,
    padding: 10,
    backgroundColor: '#f9f9f9',
    borderRadius: 5,
    borderWidth: 1,
    borderColor: '#eee',
  },
  dayTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  activityText: {
    fontSize: 16,
    marginLeft: 10,
    lineHeight: 22,
  },
});
